# ~/.zshrc

AGSHCONFDIR="$HOME/.config/shell"
AGSHALIASRC="$HOME/.config/shell/aliasrc"
AGSHFUNCTIONRC="$HOME/.config/shell/functionrc"
AGSHPROFILE="$HOME/.config/shell/profile"

[ -f "$AGSHALIASRC" ] && . "$AGSHALIASRC"
[ -f "$AGSHFUNCTIONRC" ] && . "$AGSHFUNCTIONRC"
[ -f "$AGSHPROFILE" ] && . "$AGSHPROFILE"

# Autoconfig {{{1

## compinstall
zstyle ':completion:*' completer _expand _complete _ignored _correct _approximate
zstyle :compinstall filename '/home/mrcapivaro/.zshrc'
autoload -Uz compinit
compinit

## case insensitive path-completion
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'
zstyle ':completion:*' menu select

## zsh-newuser-install
HISTFILE="$ZCONFDIR/histfile"
HISTSIZE=1000
SAVEHIST=1000
setopt autocd
unsetopt beep extendedglob nomatch

# 1}}}
# Extensions {{{1

## plugin boilerplate setup function
# ex: git clone https://github.com/user/name.git
use-git-plugin() {
    local gitrepo="$1"
    local name=${gitrepo#*/}
    if [ ! -d "$ZCONFDIR/$name" ]; then
        git clone "https://github.com/$gitrepo.git" "$ZCONFDIR/$name"
    fi
    local file="$ZCONFDIR/$name/$name.plugin.zsh"
    if [ -e "$file" ]; then
        source "$file"
    fi
}

## eval's
eval "$(starship init zsh)"
eval "$(direnv hook zsh)"
eval "$(zoxide init zsh)"

# Substitute 'cd' with 'z' if possible.
command -v z >/dev/null 2>&1 && alias cd="z"

## plugins
use-git-plugin "Aloxaf/fzf-tab" # must come after compinit and before other plugins
use-git-plugin "zsh-users/zsh-syntax-highlighting"
use-git-plugin "zsh-users/zsh-autosuggestions"
use-git-plugin "zsh-users/zsh-history-substring-search"

# 1}}}
# Keybinds {{{1

bindkey -s '^o' '^uyacd\n'
bindkey -s '^f' 'fedit\n'

bindkey "^[[H" beginning-of-line
bindkey "^[[F" end-of-line

bindkey '^a' beginning-of-line
bindkey '^e' end-of-line

bindkey "^[[A" up-history
bindkey "^[[B" down-history

bindkey "^N" up-history
bindkey "^P" down-history

bindkey '^r' history-incremental-search-backward
bindkey '^s' history-incremental-search-forward

## VI Mode
# mostly copied and pasted from oh my zsh:
# https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/vi-mode
bindkey -v
bindkey "^G" vi-cmd-mode
export KEYTIMEOUT=1 # Remove mode switching delay.

# Mode dependant cursor {{{2

# https://unix.stackexchange.com/questions/433273/changing-cursor-style-based-on-mode-in-both-zsh-and-vim
# https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/vi-mode/vi-mode.plugin.zsh

# Change cursor on mode change.
zle-keymap-select() {
    if [[ $KEYMAP == vicmd ]] || [[ $1 == "block" ]]; then
        echo -ne '\e[2 q'
    elif [[ $KEYMAP == main ]] || [[ $KEYMAP == viins ]] ||
        [[ $KEYMAP == "" ]] || [[ $1 == "beam" ]]; then
        echo -ne '\e[6 q'
    fi
}
zle -N zle-keymap-select

# Change cursor on shell init.
zle-line-init() {
    echo -ne '\e[6 q'
}
zle -N zle-line-init

# 2}}}
# System clipboard integration {{{2

wrap_clipboard_widgets() {
    # NB: Assume we are the first wrapper and that we only wrap native widgets
    # See zsh-autosuggestions.zsh for a more generic and more robust wrapper
    local verb="$1"
    shift

    # NOTE: Must be changed according to the clipboard manager installed.
    local copy_cmd="xclip -sel clip"
    local paste_cmd="xclip -o -sel clip"

    local widget
    local wrapped_name
    for widget in "$@"; do
        wrapped_name="_zsh-vi-${verb}-${widget}"
        if [ "${verb}" = copy ]; then
            eval "
        ${wrapped_name}() {
          zle .${widget}
          printf %s \"\${CUTBUFFER}\" | $copy_cmd 2>/dev/null || true
        }
      "
        else
            eval "
        ${wrapped_name}() {
          CUTBUFFER=\"\$($paste_cmd 2>/dev/null || echo \$CUTBUFFER)\"
          zle .${widget}
        }
      "
        fi
        zle -N "${widget}" "${wrapped_name}"
    done
}

# wrap_clipboard_widgets copy \
#     vi-yank vi-yank-eol vi-yank-whole-line \
#     vi-change vi-change-eol vi-change-whole-line \
#     vi-kill-line vi-kill-eol vi-backward-kill-word \
#     vi-delete vi-delete-char vi-backward-delete-char

wrap_clipboard_widgets copy \
    vi-yank vi-yank-eol vi-yank-whole-line \
    vi-change vi-change-eol vi-change-whole-line \
    vi-kill-line vi-kill-eol vi-delete vi-delete-char

wrap_clipboard_widgets paste \
    vi-put-{before,after} \
    put-replace-selection

unfunction wrap_clipboard_widgets

# 2}}}

# 1}}}
