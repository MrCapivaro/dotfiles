#
# ~/.bashrc
#

[[ $- != *i* ]] && return

# [ Evaluations ] #

eval "$(starship init bash)"
eval "$(zoxide init bash)"
eval "$(direnv hook bash)"

# [ Aliases ] #

alias tmux="tmux -2"

alias ..="cd .."
alias ....="cd ../.."

alias ls="ls --color=auto -Fa1"

alias vi="nvim"
alias vim="nvim"

alias clera="clear"
alias clare="clear"
alias claer="clear"
alias cler="clear"
alias clar="clear"

alias fzfonts="fc-list :family | awk -F: '{print \$2}' | sort | uniq | fzf | xclip -selection clipboard"

alias less="less -r"

# [ Exports ] #

export EDITOR=nvim
export VISUAL=zed
export PAGER=nvimpager

# remove background color from ls
export LS_COLORS="$LS_COLORS:tw=00;33:ow=01;33"

# [ Path ] #

# add .local/bin to path
export LOCAL_BIN="/home/mrcapivaro/.local/bin"
case ":$PATH:" in
*":$LOCAL_BIN:"*) ;;
*) export PATH="$LOCAL_BIN:$PATH" ;;
esac

# add rust to path
if [ -d "$HOME/.cargo" ]; then
    . "$HOME/.cargo/env"
fi
# end

# add pnpm to path
export PNPM_HOME="/home/mrcapivaro/.local/share/pnpm"
case ":$PATH:" in
*":$PNPM_HOME:"*) ;;
*) export PATH="$PNPM_HOME:$PATH" ;;
esac
# end

# add lua to path
export LUA_PATH='/usr/share/lua/5.3/?.lua;/usr/share/lua/5.3/?/init.lua;/usr/lib/lua/5.3/?.lua;/usr/lib/lua/5.3/?/init.lua;./?.lua;./?/init.lua;/home/mrcapivaro/.luarocks/share/lua/5.3/?.lua;/home/mrcapivaro/.luarocks/share/lua/5.3/?/init.lua'
export LUA_CPATH='/usr/lib/lua/5.3/?.so;/usr/lib/lua/5.3/loadall.so;./?.so;/home/mrcapivaro/.luarocks/lib/lua/5.3/?.so'

# [ Functions ] #

cheat() {
    curl cheat.sh/$@ | less
}

gitall() {
    local message="${*:-update}"
    git add . && git commit -m "$message" && git push
}

extract() {
    if [ -f $1 ]; then
        case $1 in
        *.tar.bz2) tar xjf $1 ;;
        *.tar.gz) tar xzf $1 ;;
        *.bz2) bunzip2 $1 ;;
        *.rar) rar x $1 ;;
        *.gz) gunzip $1 ;;
        *.tar) tar xf $1 ;;
        *.tbz2) tar xjf $1 ;;
        *.tgz) tar xzf $1 ;;
        *.zip) unzip $1 ;;
        *.Z) uncompress $1 ;;
        *) echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

fl() {
    ls -alF --color=always "$@" | awk '{print $9}'
}

help() {
    "$@" --help | $PAGER
}

rsync() {
    local options=""
    while [[ "$1" != "" ]]; do
        case "$1" in
        --dry-run)
            options+="--dry-run "
            ;;
        --resync)
            options+="--resync "
            ;;
        --help)
            echo "Usage: rbisync [OPTIONS]"
            echo ""
            echo "Options:"
            echo "  --dry-run  Perform a dry run without making changes."
            echo "  --resync   Force a resynchronization(should be used once)."
            echo "  --help     Display this help message."
            return 0
            ;;
        *)
            echo "$1 is not an option."
            exit 1
            ;;
        esac
        shift
    done
    rclone bisync \
        "$RCLONE_LOCAL" \
        "$RCLONE_REMOTE" \
        --create-empty-src-dirs \
        --compare size,modtime,checksum \
        --slow-hash-sync-only \
        --resilient \
        -MvP \
        --drive-skip-gdocs \
        --fix-case \
        "$options"
}

{{- if (.chezmoi.kernel.osrelease | lower | contains "microsoft") }}
# [ WSL Specific ] #
# to ensure wslg, run wsl --update AFTER installing wsl distro
# https://github.com/microsoft/wslg/wiki/Diagnosing-%22cannot-open-display%22-type-issues-with-WSLg
export BROWSER=wslview
export DISPLAY=:0
alias explorer="/mnt/c/Windows/explorer.exe"
alias ii="/mnt/c/Windows/explorer.exe"
{{- end }}
