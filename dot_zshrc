# External

eval "$(starship init zsh)"
eval "$(zoxide init zsh)"
eval "$(direnv hook zsh)"

source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
source /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh

#

alias ..="cd .."
alias ....="cd ../.."

alias vi="nvim"
alias vim="nvim"

alias clera="clear"
alias clare="clear"
alias claer="clear"
alias cler="clear"
alias clar="clear"

alias fzfonts="fc-list :family | awk -F: '{print \$2}' | sort | uniq | fzf | xclip -selection clipboard"

alias ls="ls --color=always -F1"
alias fl="yazi" # terminal FiLe manager
alias sa="xbps-query -Rs" # search apps for package manager

#

export EDITOR=nvim
export VISUAL=zed
export PAGER=nvimpager


# [ Path ] #

# add .local/bin to path
export LOCAL_BIN="/home/mrcapivaro/.local/bin"
case ":$PATH:" in
*":$LOCAL_BIN:"*) ;;
*) export PATH="$LOCAL_BIN:$PATH" ;;
esac

# add rust to path
if [ -d "$HOME/.cargo" ]; then
    . "$HOME/.cargo/env"
fi
# end

# add pnpm to path
export PNPM_HOME="/home/mrcapivaro/.local/share/pnpm"
case ":$PATH:" in
*":$PNPM_HOME:"*) ;;
*) export PATH="$PNPM_HOME:$PATH" ;;
esac
# end

# add lua to path
export LUA_PATH="/usr/share/lua/5.3/?.lua;/usr/share/lua/5.3/?/init.lua;/usr/lib/lua/5.3/?.lua;/usr/lib/lua/5.3/?/init.lua;./?.lua;./?/init.lua;$HOME/.luarocks/share/lua/5.3/?.lua;$HOME/.luarocks/share/lua/5.3/?/init.lua"
export LUA_CPATH="/usr/lib/lua/5.3/?.so;/usr/lib/lua/5.3/loadall.so;./?.so;$HOME/.luarocks/lib/lua/5.3/?.so"

# [ Functions ] #

cheat() {
    curl cheat.sh/$@ | less
}

gitall() {
    local message="${*:-update}"
    git add . && git commit -m "$message" && git push
}

extract() {
    if [ -f $1 ]; then
        case $1 in
        *.tar.bz2) tar xjf $1 ;;
        *.tar.gz) tar xzf $1 ;;
        *.bz2) bunzip2 $1 ;;
        *.rar) rar x $1 ;;
        *.gz) gunzip $1 ;;
        *.tar) tar xf $1 ;;
        *.tbz2) tar xjf $1 ;;
        *.tgz) tar xzf $1 ;;
        *.zip) unzip $1 ;;
        *.Z) uncompress $1 ;;
        *) echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

help() {
    "$@" --help | $PAGER
}

rsync() {
    local options=""
    while [[ "$1" != "" ]]; do
        case "$1" in
        --dry-run)
            options+="--dry-run "
            ;;
        --resync)
            options+="--resync "
            ;;
        --help)
            echo "Usage: rbisync [OPTIONS]"
            echo ""
            echo "Options:"
            echo "  --dry-run  Perform a dry run without making changes."
            echo "  --resync   Force a resynchronization(should be used once)."
            echo "  --help     Display this help message."
            return 0
            ;;
        *)
            echo "$1 is not an option."
            exit 1
            ;;
        esac
        shift
    done
    rclone bisync \
        "$RCLONE_LOCAL" \
        "$RCLONE_REMOTE" \
        --create-empty-src-dirs \
        --compare size,modtime,checksum \
        --slow-hash-sync-only \
        --resilient \
        -MvP \
        --drive-skip-gdocs \
        --fix-case \
        "$options"
}

# The following lines were added by compinstall
zstyle ':completion:*' completer _expand _complete _ignored _correct _approximate
zstyle :compinstall filename '/home/mrcapivaro/.zshrc'

autoload -Uz compinit
compinit
# End of lines added by compinstall

# Lines configured by zsh-newuser-install
HISTFILE=~/.config/zsh/histfile
HISTSIZE=1000
SAVEHIST=1000
setopt autocd
unsetopt beep extendedglob nomatch
bindkey -v
# End of lines configured by zsh-newuser-install
