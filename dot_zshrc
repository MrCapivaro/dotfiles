# ~/.zshrc

#{{{1 Vars
export ZCONFDIR="$HOME/.config/zsh"

## Default Programs
export EDITOR=nvim
export VISUAL=zed
export PAGER=nvimpager

## Programming Languages
export PNPM_HOME="$HOME/.local/share/pnpm"
export LUA_PATH="/usr/share/lua/5.3/?.lua;/usr/share/lua/5.3/?/init.lua;/usr/lib/lua/5.3/?.lua;/usr/lib/lua/5.3/?/init.lua;./?.lua;./?/init.lua;$HOME/.luarocks/share/lua/5.3/?.lua;$HOME/.luarocks/share/lua/5.3/?/init.lua"
export LUA_CPATH="/usr/lib/lua/5.3/?.so;/usr/lib/lua/5.3/loadall.so;./?.so;$HOME/.luarocks/lib/lua/5.3/?.so"
#1}}}

#{{{1 Autoconfig
## compinstall
zstyle ':completion:*' completer _expand _complete _ignored _correct _approximate
zstyle :compinstall filename '/home/mrcapivaro/.zshrc'
autoload -Uz compinit; compinit
## case insensitive path-completion
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'
zstyle ':completion:*' menu select

## zsh-newuser-install
HISTFILE=$ZCONFDIR/histfile
HISTSIZE=1000
SAVEHIST=1000
setopt autocd
unsetopt beep extendedglob nomatch
#1}}}

#{{{1 Extensions
## plugin boilerplate setup function
# ex: git clone https://github.com/user/name.git
function use-git-plugin {
    local gitrepo="$1"
    local name=${gitrepo#*/}
    if [ ! -d "$ZCONFDIR/$name" ]; then
        git clone "https://github.com/$gitrepo.git" "$ZCONFDIR/$name"
    fi
    local file="$ZCONFDIR/$name/$name.plugin.zsh"
    if [ -e "$file" ]; then
        source "$file"
    fi
}

## embedded tools
eval "$(starship init zsh)"
eval "$(zoxide init zsh)"
eval "$(direnv hook zsh)"

## plugins
use-git-plugin "Aloxaf/fzf-tab" # must come after compinit and before other plugins
use-git-plugin "zsh-users/zsh-syntax-highlighting"
use-git-plugin "zsh-users/zsh-autosuggestions"
use-git-plugin "zsh-users/zsh-history-substring-search"
use-git-plugin "jeffreytse/zsh-vi-mode"
#1}}}

#{{{1 Keybinds
bindkey "^[[H" beginning-of-line
bindkey "^[[F" end-of-line
bindkey "^[[A" up-history
bindkey "^[[B" down-history
# bindkey -v
# bindkey "^G" vi-cmd-mode
#1}}}

#{{{1 Aliases
alias ..="cd .."
alias ....="cd ../.."

alias vi="nvim"
alias vim="nvim"

alias claer="clear"
alias clera="clear"
alias clare="clear"
alias cleer="clear"
alias claar="clear"
alias cler="clear"
alias clar="clear"

alias ls="ls --color=always -F1"
alias fl="yazi"           # terminal FiLe manager
alias sa="xbps-query -Rs" # Search Apps for package manager

alias fzfonts="fc-list :family | awk -F: '{print \$2}' | sort | uniq | fzf | xclip -selection clipboard"
#1}}}

#{{{1 Functions
function cheat {
    curl cheat.sh/$@ | $PAGER
}

function gitall {
    local message="${*:-update}"
    git add . && git commit -m "$message" && git push
}

function extract {
    if [ -f $1 ]; then
        case $1 in
        *.tar.bz2) tar xjf $1 ;;
        *.tar.gz) tar xzf $1 ;;
        *.bz2) bunzip2 $1 ;;
        *.rar) rar x $1 ;;
        *.gz) gunzip $1 ;;
        *.tar) tar xf $1 ;;
        *.tbz2) tar xjf $1 ;;
        *.tgz) tar xzf $1 ;;
        *.zip) unzip $1 ;;
        *.Z) uncompress $1 ;;
        *) echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

function help {
    "$@" --help | $PAGER
}

function rsync {
    local options=""
    while [[ "$1" != "" ]]; do
        case "$1" in
        --dry-run)
            options+="--dry-run "
            ;;
        --resync)
            options+="--resync "
            ;;
        --help)
            echo "Usage: rbisync [OPTIONS]"
            echo ""
            echo "Options:"
            echo "  --dry-run  Perform a dry run without making changes."
            echo "  --resync   Force a resynchronization(should be used once)."
            echo "  --help     Display this help message."
            return 0
            ;;
        *)
            echo "$1 is not an option."
            exit 1
            ;;
        esac
        shift
    done
    rclone bisync \
        "$RCLONE_LOCAL" \
        "$RCLONE_REMOTE" \
        --create-empty-src-dirs \
        --compare size,modtime,checksum \
        --slow-hash-sync-only \
        --resilient \
        -MvP \
        --drive-skip-gdocs \
        --fix-case \
        "$options"
}
#1}}}

#{{{1 Path
##
function ensure-path {
    local dir=$1
    case ":$PATH:" in
        *:"$dir":*)
            ;;
        *)
            export PATH="$dir:$PATH"
            ;;
    esac
}

##
ensure-path "$HOME/.local/bin" # User
ensure-path "$HOME/.cargo/bin" # Rust
ensure-path "$PNPM_HOME"       # Node
#1}}}
