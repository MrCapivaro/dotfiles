# ~/.bashrc

# Return if not interactive.
[[ $- != *i* ]] && return

#{{{1 Extensions

eval "$(starship init bash)"
eval "$(zoxide init bash)"
eval "$(direnv hook bash)"

#1}}}

#{{{1 Aliases

alias tmux="tmux -2"

alias ..="cd .."
alias ....="cd ../.."

alias ls="ls --color=auto -F"

alias vi="nvim"
alias vim="nvim"

alias clera="clear"
alias clare="clear"
alias claer="clear"
alias cler="clear"
alias clar="clear"

alias fzfonts="fc-list :family | awk -F: '{print \$2}' | sort | uniq | fzf | xclip -selection clipboard"

alias less="less -r"

#1}}}

#{{{1 Exports

export EDITOR=nvim
export VISUAL=zed
export PAGER=nvimpager

# Remove background color from 'ls'.
export LS_COLORS="$LS_COLORS:tw=00;33:ow=01;33"

export LOCAL_BIN="/home/mrcapivaro/.local/bin"
export PNPM_HOME="/home/mrcapivaro/.local/share/pnpm"
export LUA_PATH='/usr/share/lua/5.3/?.lua;/usr/share/lua/5.3/?/init.lua;/usr/lib/lua/5.3/?.lua;/usr/lib/lua/5.3/?/init.lua;./?.lua;./?/init.lua;/home/mrcapivaro/.luarocks/share/lua/5.3/?.lua;/home/mrcapivaro/.luarocks/share/lua/5.3/?/init.lua'
export LUA_CPATH='/usr/lib/lua/5.3/?.so;/usr/lib/lua/5.3/loadall.so;./?.so;/home/mrcapivaro/.luarocks/lib/lua/5.3/?.so'

## Path
# Add to path boilerplate code function
function ensure-in-path() {
    local dir="$1"
    case ":$PATH:" in
        *":$dir:"*) ;;
        *) export PATH="$dir:$PATH" ;;
    esac
}

ensure-in-path "$LOCAL_BIN"
ensure-in-path "$HOME/.cargo/bin"
ensure-in-path "$PNPM_HOME"

#1}}}

#{{{1 Functions

cheat() {
    curl cheat.sh/$@ | less
}

gitall() {
    local message="${*:-update}"
    git add . && git commit -m "$message" && git push
}

extract() {
    if [ -f $1 ]; then
        case $1 in
            *.tar.bz2) tar xjf $1 ;;
            *.tar.gz) tar xzf $1 ;;
            *.bz2) bunzip2 $1 ;;
            *.rar) rar x $1 ;;
            *.gz) gunzip $1 ;;
            *.tar) tar xf $1 ;;
            *.tbz2) tar xjf $1 ;;
            *.tgz) tar xzf $1 ;;
            *.zip) unzip $1 ;;
            *.Z) uncompress $1 ;;
            *) echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

fl() {
    ls -alF --color=always "$@" | awk '{print $9}'
}

help() {
    "$@" --help | $PAGER
}

#1}}}
